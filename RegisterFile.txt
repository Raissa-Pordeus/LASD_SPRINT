module RegisterFile(
  input [7:0] wd3,         // Write Data
  input clk, we3,         // Clock and Write Enable
  input [2:0] wa3, ra1, ra2, // Write Address, Register Data 1 and Register Data 2
  input interrupt,        // Interrupt signal
  output reg [7:0] rd1, rd2, // Register Address 1 and Register Address 2
  output [7:0] S0, S1, S2, S3, S4, S5, S6, S7 // Auxiliary Variables
);
  reg [7:0] registers [0:7]; // Array of registers
  
  assign S0 = registers[0];
  assign S1 = registers[1];
  assign S2 = registers[2];
  assign S3 = registers[3];
  assign S4 = registers[4];
  assign S5 = registers[5];
  assign S6 = registers[6];
  assign S7 = registers[7];
  
  always @(posedge clk) begin
    // Registering
    registers[0] <= 0;
    if (we3 & (wa3 == 1))
      registers[1] <= wd3;
    if (we3 & (wa3 == 2))
      registers[2] <= wd3;
    if (we3 & (wa3 == 3))
      registers[3] <= wd3;
    if (we3 & (wa3 == 4))
      registers[4] <= wd3;
    if (we3 & (wa3 == 5))
      registers[5] <= wd3;
    if (we3 & (wa3 == 6))
      registers[6] <= wd3;
    if (we3 & (wa3 == 7))
      registers[7] <= wd3;
  end
  
  always @(*) begin
    // MUX 1
    // Register Data 1 Values
    case (ra1)
      3'b000: rd1 = 0;
      3'b001: rd1 = registers[1];
      3'b010: rd1 = registers[2];
      3'b011: rd1 = registers[3];
      3'b100: rd1 = registers[4];
      3'b101: rd1 = registers[5];
      3'b110: rd1 = registers[6];
      3'b111: rd1 = registers[7];
    endcase
    
    case (ra2)
      3'b000: rd2 = 0;
      3'b001: rd2 = registers[1];
      3'b010: rd2 = registers[2];
      3'b011: rd2 = registers[3];
      3'b100: rd2 = registers[4];
      3'b101: rd2 = registers[5];
      3'b110: rd2 = registers[6];
      3'b111: rd2 = registers[7];
    endcase
  end
  
  reg interrupt_flag = 0;    // Interrupt flag
  reg [2:0] interrupt_addr;  // Interrupt address
  
  always @(posedge clk) begin
    if (interrupt) begin
      interrupt_flag <= 1;
      interrupt_addr <= ra1; // Store the interrupt address
    end else begin
      interrupt_flag <= 0;
    end
    
    // Interrupt handling
    if (interrupt_flag) begin
      case (interrupt_addr)
        3'b001: rd1 <= wd3; // Update rd1 with the interrupt value
        3'b010: rd2 <= wd3; // Update rd2 with the interrupt value
        // Add more cases for handling other interrupt addresses if needed
      endcase
    end
  end
  
endmodule
